buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.5")
    }
}



plugins {
    id 'java'
    id 'com.bmuschko.docker-remote-api' version '8.1.0'
//    id 'com.bmuschko.docker-remote-api' version '3.2.0'
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'


import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer


jar {
    archiveBaseName = 'numeral-conversion-service'
    archiveVersion =  '0.1.0-SNAPSHOT'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.17
targetCompatibility = 1.17

dependencies {
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'org.springframework.boot:spring-boot-devtools:2.7.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest:2.7.5'

    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'

    // tag::actuator[]
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.5'
    // end::actuator[]
    implementation 'com.google.guava:guava:23.0'
    // tag::tests[]
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.5'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.6.RELEASE'
    // end::tests[]

    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    // testImplementation 'org.skyscreamer:jsonassert:1.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testImplementation( 'org.junit.jupiter:junit-jupiter:5.9.1')
}

bootRun {
    systemProperties = System.getProperties()
}

test {
    systemProperties = System.getProperties()
    useJUnitPlatform()
}


// test {
//     useJUnitPlatform()
// }



docker {
    javaApplication {
        baseImage = 'openjdk:latest'
        // tag = 'numeral'
        ports = [8080]
    }
}

task createDockerfile(type: Dockerfile) {
    destFile=project.file('build/docker/Dockerfile')
    from 'ubuntu:16.04'
}


task createContainer(type: DockerCreateContainer){
    dependsOn dockerBuildImage
    targetImageId { dockerBuildImage.getImageId()}
    hostConfig.portBindings = ['8080:8080']
    containerName = 'numeral-conversion-service'
}

task startContainer(type:DockerStartContainer){
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}



task downloadDependencies {
  description "Pre-downloads *most* dependencies"
  doLast {
    configurations.getAsMap().each { name, config ->
      println "Retrieving dependencies for $name"
      try {
        config.files
      } catch (e) {
        project.logger.info e.message // some cannot be resolved, silentlyish skip them
      }
    }
  }
}


// task getDeps(type: Copy) {
//     from sourceSets.main.runtimeClasspath
//     into 'runtime/'

//     doFirst {
//         ant.delete(dir: 'runtime')
//         ant.mkdir(dir: 'runtime')
//     }

//     doLast {
//         ant.delete(dir: 'runtime')
//     }
// }

// task downloadDependencies {
//    doLast {
//        configurations.findAll{it.canBeResolved}.each{it.resolve()}
//    }
// }